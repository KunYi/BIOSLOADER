     1                                  [bits 16]
     2                                  [org 0xFA00]
     3                                  ;
     4                                  ; Even though we declare 0xFA00 as a starting address, the BIOS will
     5                                  ; load us at 0x7C00. But just at the beginning of our code, we'll 
     6                                  ; copy ourselves to 0xFA00 and jump in the right place.
     7                                  ;
     8                                  
     9                                  STACK_START     EQU 0FA00H  ; Starting location of stack.
    10                                  INT1E_VECTOR    EQU 0078H   ; INT 01Eh vector location.
    11                                  READ_LENGTH     EQU 68      ; Number size of bootloader image in sectors.
    12                                  LOAD_ADDRESS    EQU 1000H   ; Boot loader load address.
    13                                  
    14                                  ;
    15                                  ; This file contains the boot sector code for the Windows CE BIOS bootloader.
    16                                  ; A quick overview of the boot process:
    17                                  ;
    18                                  ; * At power-on, the BIOS performs POST.
    19                                  ; * The BIOS seeks out the boot disk and on a fixed disk, loads the first sector
    20                                  ;   (the master boot record - MBR) and jumps to it (the MBR contains code and data).
    21                                  ;   Note that for a floppy, the first sector on the disk is the boot sector (no MBR).
    22                                  ; * The MBR code, amongst other things, locates the active boot partition and loads
    23                                  ;   the boot sector code (this code).
    24                                  ; * The boot sector code is the first filesystem-specific bit of code and it's job
    25                                  ;   is to locate, load, and bootstrap the OS (or in our case, the bootloader).
    26                                  ;
    27                                  
    28                                  ;
    29                                  ; Start of boot sector code.
    30                                  ;
    31 00000000 EB62                        JMP     Start
    32 00000002 90                          NOP
    33 00000003 668904                      mov  DWORD [si], eax
    34 00000006 668914                      mov  DWORD [si], edx
    35 00000009 668B5604                    mov  edx, DWORD [bp+4]
    36                                  
    37                                      ; Note: we're going to rely on the format program to set this up for us.  When our
    38                                      ; boot sector is written to the storage device, we'll leave the BIOS parameter block
    39                                      ; in tact.
    40                                      ;
    41                                      ;                                           Offset  Size
    42                                      ;                                           0       3
    43 0000000D 57494E444F574345            VerId           db  'WINDOWCE'      ; 7C03  3       8
    44 00000015 0000                        BytePerSect     dw  0000            ; 7C0B  11      2
    45 00000017 00                          SectPerClust    db  00              ; 7C0D  13      1
    46 00000018 0000                        RsvdSects       dw  0000            ; 7C0E  14      2
    47 0000001A 00                          NumFATs         db  00              ; 7C10  16      1
    48 0000001B 0000                        Num32bEntry     dw  0000            ; 7C11  17      2
    49 0000001D 0000                        SectPerPart     dw  0000            ; 7C13  19      2
    50 0000001F 00                          MediaDesc       db  00              ; 7C15  21      1
    51 00000020 0000                        SectPerFAT      dw  0000            ; 7C16  22      2
    52 00000022 0000                        SectPerTrack    dw  0000            ; 7C18  24      2
    53 00000024 0000                        NumHeads        dw  0000            ; 7C1A  26      2
    54 00000026 0000                        NumHiddenSectL  dw  0000            ; 7C1C  28      2
    55 00000028 0000                        NumHiddenSectH  dw  0000            ; 7C1E  30      2
    56 0000002A 0000                        TotalSectorsL   dw  0000            ; 7C20  32      2
    57 0000002C 0000                        TotalSectorsH   dw  0000            ; 7C22  34      2
    58 0000002E 0000                        SectPerFATL     dw  0000            ; 7C24  36      2
    59 00000030 0000                        SectPerFATH     dw  0000            ; 7C26  38      2
    60 00000032 0000                        FAT32Flags      dw  0000            ; 7C28  40      2
    61 00000034 0000                        FSVersion       dw  0000            ; 7C2A  42      2
    62 00000036 0000                        FirstClusterL   dw  0000            ; 7C2C  44      2
    63 00000038 0000                        FirstClusterH   dw  0000            ; 7C2E  46      2
    64 0000003A 0000                        FSInfo          dw  0000            ; 7C30  48      2
    65 0000003C 0000                        BackupBootSect  dw  0000            ; 7C32  50      2
    66 0000003E 202020202020202020-         Reserved        db  '            '  ; 7C34  52      12
    66 00000047 202020             
    67 0000004A 00                          DriveId         db  00              ; 7C40  64      1
    68 0000004B 00                          Reserved1       db  00              ; 7C41  65      1
    69 0000004C 00                          ExtRecordSig    db  00              ; 7C42  66      1
    70 0000004D 0000                        VolSerNumL      dw  0000            ; 7C43  67      2
    71 0000004F 0000                        VolSerNumH      dw  0000            ; 7C45  69      2
    72 00000051 202020202020202020-         VolLabel        db  '           '   ; 7C47  71      11
    72 0000005A 2020               
    73 0000005C 4641543332202020            TypeFAT         db  'FAT32   '      ; 7C52  82      8
    74                                                                          ;       90
    75                                  ;
    76                                  ; So the size of the file should be SECTOR_SIZE - 90.  This will be 422
    77                                  ; on a 512 byte/sector hard disk.
    78                                  ;
    79                                  
    80                                  ;
    81                                  ; Start of boot sector code
    82                                  ;
    83                                  Start:
    84                                  _7C5A:
    85                                      ; Set up the stack and segments.
    86 00000064 FA                          CLI                 ; 7C5A
    87 00000065 31C0                        XOR     AX,AX
    88 00000067 8ED0                        MOV     SS,AX
    89 00000069 BC00FA                      MOV     SP,STACK_START
    90 0000006C 16                          PUSH    SS
    91 0000006D 07                          POP     ES
    92 0000006E 0E                          PUSH    CS
    93 0000006F 1F                          POP     DS
    94                                  
    95                                      ; To make more room for the BLDR code
    96                                      ; copy the bootsector code from 0x7C00 to 0xFA00
    97 00000070 BE007C                      MOV     SI,7C00H
    98 00000073 BF00FA                      MOV     DI,0FA00H
    99 00000076 B90002                      MOV     CX,0200H
   100 00000079 FC                          CLD
   101 0000007A F3A4                        REPZ    MOVSB
   102                                  
   103                                      ; Make a relative jump so that we actually execute from the new memory location (0xFA00)
   104                                      ; Yes - this is a jump short command
   105 0000007C E9                          DB      00E9H
   106 0000007D 007E                        DW      (0FA00h - 7C00h)
   107                                  
   108 0000007F FB                          STI
   109                                      
   110                                      ; Locate the first sector of the data area
   111                                      ; For FAT32 this is as follows:
   112                                      ; FirstDataSector = BPB_ReservedSectors + (BPB_NumFATs * BPB_FATSz32)
   113                                      ;
   114 00000080 31C0                        XOR     AX, AX
   115 00000082 A0[1A00]                    MOV     AL,[NumFATs]
   116 00000085 F726[2E00]                  MUL     WORD [SectPerFATL]
   117 00000089 89C3                        MOV     BX, AX
   118 0000008B 89D1                        MOV     CX, DX
   119 0000008D A0[1A00]                    MOV     AL,[NumFATs]
   120 00000090 F726[3000]                  MUL     WORD [SectPerFATH]
   121                                  
   122                                      ; TODO::DX must be zero or we will overflow.  Bail out if it isn't zero.
   123                                      ;      CX:BX
   124                                      ; + DX:AX:00
   125                                      ; ----------
   126 00000094 01C1                        ADD     CX, AX
   127 00000096 89D8                        MOV     AX, BX
   128 00000098 89CA                        MOV     DX, CX
   129                                  
   130 0000009A 0306[2600]                  ADD     AX,[NumHiddenSectL]
   131 0000009E 1316[2800]                  ADC     DX,[NumHiddenSectH]
   132 000000A2 0306[1800]                  ADD     AX,[RsvdSects]
   133 000000A6 83D200                      ADC     DX,+00
   134                                  
   135                                      ;
   136                                      ; BLDR is expecting to find the first data sector at this location, not
   137                                      ; the first sector of the root directory.  These two may not be equal
   138                                      ; in FAT32.
   139                                      ;
   140 000000A9 A3[6F00]                    MOV     WORD [_7C5A+0BH],AX
   141 000000AC 8916[7100]                  MOV     WORD [_7C5A+0DH],DX
   142                                  
   143                                      ; Locate the first sector of the root directory
   144                                      ;
   145 000000B0 31C0                        XOR     AX, AX
   146 000000B2 A1[3600]                    MOV     AX, WORD [FirstClusterL]
   147 000000B5 48                          DEC     AX
   148 000000B6 48                          DEC     AX
   149 000000B7 F626[1700]                  MUL     BYTE [SectPerClust]
   150                                  
   151                                      ; TODO::Assuming that [FirstClusterH] is zero.  This should be true when
   152                                      ; we format the media.
   153                                  
   154                                      ; Begin to read from the root directory (into sector cache at 0x500).
   155                                      ; We're going to look for our bootloader file name in the directory.
   156 000000BB BB0005                      MOV     BX,0500H                  ; Buffer Address
   157 000000BE 0306[6F00]                  ADD     AX, WORD [_7C5A+0BH]
   158 000000C2 1316[7100]                  ADC     DX, WORD [_7C5A+0DH]
   159 000000C6 E87D00                      CALL    ReadSectorEx
   160 000000C9 721C                        JB      DiskError
   161                                  
   162                                      ;
   163                                      ; CX = BytesPerSector / BytesPerEntry = Number of entries in a sector
   164                                      ;
   165 000000CB A1[1500]                    MOV     AX,[BytePerSect]
   166 000000CE B105                        MOV     CL,05H
   167 000000D0 D3E8                        SHR     AX,CL
   168 000000D2 89C1                        MOV     CX,AX
   169                                      
   170                                  FindEntry:
   171 000000D4 51                          PUSH    CX
   172 000000D5 89DF                        MOV     DI,BX
   173 000000D7 B90B00                      MOV     CX,000BH
   174 000000DA BE[8301]                    MOV     SI, ImageName
   175 000000DD F3A6                        REPZ    CMPSB
   176 000000DF 741E                        JZ      FoundFiles      ; Found it?
   177 000000E1 83C320                      ADD     BX,020H     ; Move to the next entry
   178 000000E4 59                          POP     CX
   179 000000E5 E2ED                        LOOP    FindEntry
   180                                  
   181                                      ; A disk error has occurred - usually this is because we couldn't find the bootloader
   182                                      ; file on the disk.  Display the error text below.
   183                                      ;
   184                                  DiskError:
   185 000000E7 BE[6D01]                    MOV     SI, ErrorMsg
   186 000000EA E84A00                      CALL    PrintMessage
   187 000000ED 31C0                        XOR     AX,AX
   188 000000EF CD16                        INT     16h
   189 000000F1 5E                          POP     SI
   190 000000F2 1F                          POP     DS
   191 000000F3 8F04                        POP     WORD [SI]
   192 000000F5 8F4402                      POP     WORD [SI+02H]
   193 000000F8 CD19                        INT     19h
   194                                  
   195                                  ConvertFail:
   196 000000FA 58                          POP     AX
   197 000000FB 58                          POP     AX
   198 000000FC 58                          POP     AX
   199 000000FD EBE8                        JMP     DiskError
   200                                  
   201                                      ;
   202                                      ; We found our bootloader on the disk - now we need to load it.  There are a couple of
   203                                      ; important things here:
   204                                      ;
   205                                      ; * The bootloader image must be in a contiguous grouping of sectors on the disk.  This is
   206                                      ;   because the bootloader doesn't contain code to load the rest of itself, like DOS's IO.SYS
   207                                      ;   does.  This requirement imposes a retriction which must be addressed by the utility that
   208                                      ;   writes the bootloader image to disk.  On a newly-formatted disk, empty disk, the main
   209                                      ;   problem would come from bad disk sectors.
   210                                      ;
   211                                      ; * The boot sector loads the bootloader at a predetermined address (0x1000h).  This location
   212                                      ;   is compatible with the bootloader configuration (in boot.bib).  As well, it allows for
   213                                      ;   the BIOS interrupt vector table to remain unaffected.
   214                                      ;
   215                                      ; * When the bootloader image is loaded, the boot sector code loads a predetermined number of
   216                                      ;   sectors from the storage device.  The number of sectors to be loaded is determined at build
   217                                      ;   time and if the loader image size changes, this number will need to be updated (READ_LENGTH above).
   218                                      ;
   219                                      ; * The boot sector puts information into CPU registers that are passed up to the bootloader.  These
   220                                      ;   values are important for the loader to operate and care needs to be taken in the early loader
   221                                      ;   initialization, to avoid losing this data.
   222                                      ;
   223                                  FoundFiles:
   224                                      ; TODO::Assuming that the high word of the entry's first cluster [BX+14H] is zero.
   225                                      ;
   226 000000FF 8B471A                      MOV     AX, [BX+1AH]
   227 00000102 48                          DEC     AX
   228 00000103 48                          DEC     AX
   229 00000104 8A1E[1700]                  MOV     BL, [SectPerClust]
   230 00000108 30FF                        XOR     BH,BH
   231 0000010A F7E3                        MUL     BX
   232 0000010C 0306[6F00]                  ADD     AX,WORD [_7C5A+0BH] ; LBA
   233 00000110 1316[7100]                  ADC     DX,WORD [_7C5A+0DH] ; LBA
   234                                      ; Load BLDR at 0000:1000h
   235 00000114 BB0010                      MOV     BX,LOAD_ADDRESS
   236 00000117 B94400                      MOV     CX,READ_LENGTH
   237                                  Loop1:
   238 0000011A E82900                      CALL    ReadSectorEx
   239 0000011D 72C8                        JB      DiskError
   240 0000011F 83C001                      ADD     AX,0001H
   241 00000122 83D200                      ADC     DX,+00
   242 00000125 031E[1500]                  ADD     BX,[BytePerSect]
   243 00000129 E2EF                        LOOP    Loop1
   244                                      
   245                                      ; Put the media type, drive number, and data start LBA into registers that are passed to the bootloader.
   246                                      ;
   247 0000012B 8B1E[6F00]                  MOV     BX,WORD [_7C5A+0BH]
   248 0000012F A1[7100]                    MOV     AX,WORD [_7C5A+0DH]
   249                                      
   250                                      ; Jump to the bootloader image.
   251                                      ;
   252 00000132 EA                          DB      00EAH
   253 00000133 0010                        DW      LOAD_ADDRESS
   254 00000135 0000                        DW      0000H
   255                                  
   256                                      ; Display a text message using the BIOS INT 10h call.
   257                                      ;
   258                                  PrintMessage:
   259 00000137 AC                          LODSB
   260 00000138 08C0                        OR      AL,AL
   261 0000013A 7409                        JZ      Return
   262 0000013C B40E                        MOV     AH,0EH
   263 0000013E BB0700                      MOV     BX,0007H
   264 00000141 CD10                        INT     10h
   265 00000143 EBF2                        JMP     PrintMessage
   266                                  
   267                                  ;PrintAX:
   268                                  ;    PUSH     BX
   269                                  ;    XOR      BX, BX
   270                                  ;    PUSH     CX
   271                                  ;    MOV      CL, 4
   272                                  ;StartPrinting:
   273                                  ;    PUSH     AX
   274                                  ;    CMP      BX, 1
   275                                  ;    JG       DoneExchange
   276                                  ;    MOV      AL, AH
   277                                  ;DoneExchange:
   278                                  ;    TEST     BX, 1
   279                                  ;    JNE      ConvertNumber
   280                                  ;    SHR      AL, CL
   281                                  ;ConvertNumber:
   282                                  ;    AND      AL, 0FH
   283                                  ;    ADD      AL, 030H
   284                                  ;    CMP      AL, 03AH
   285                                  ;    JB       PrintNum
   286                                  ;    ADD      AL, 07H
   287                                  ;PrintNum:
   288                                  ;    MOV      AH, 0EH
   289                                  ;    INT      10H
   290                                  ;    POP      AX
   291                                  ;    INC      BX
   292                                  ;    CMP      BX, 4
   293                                  ;    JB       StartPrinting
   294                                  ;    PUSH     AX
   295                                  ;    MOV      AH, 0EH
   296                                  ;    MOV      AL,0DH
   297                                  ;    INT      10h
   298                                  ;    MOV      AL,0AH
   299                                  ;    INT      10h
   300                                  ;    POP      AX
   301                                  ;    POP      CX
   302                                  ;    POP      BX
   303                                  ;    JMP      Return
   304                                  
   305                                  ; PrintBuffer
   306                                  ; Input
   307                                  ;   BX - Buffer
   308                                  ;   CX - Bytes to print
   309                                  
   310                                  ;PrintBuffer:
   311                                  ;    PUSH AX
   312                                  ;    PUSH BX
   313                                  ;PrepareByte:
   314                                  ;    PUSH  CX
   315                                  ;    MOV   CL, 4
   316                                  ;    MOV   AL, BYTE PTR [BX]
   317                                  ;    ROR   AL, CL
   318                                  ;    MOV   AH, 0EH
   319                                  ;PrintByte:
   320                                  ;    PUSH  AX
   321                                  ;    AND   AL, 0FH
   322                                  ;    ADD   AL, 030H
   323                                  ;    CMP   AL, 03AH
   324                                  ;    JB    PrintNum
   325                                  ;    ADD   AL, 07H
   326                                  ;PrintNum:
   327                                  ;    INT   10H
   328                                  ;    POP   AX
   329                                  ;    SHR   AL,CL
   330                                  ;    SUB   CL,2       ; This is just to determine if we should try to print this byte
   331                                  ;    JNZ   PrintByte  ; again.  4 -> 2 -> 0
   332                                  ;    INC   BX
   333                                  ;    POP   CX
   334                                  ;    Loop  PrepareByte
   335                                  ;    MOV      AL,0DH
   336                                  ;    INT      10h
   337                                  ;    MOV      AL,0AH
   338                                  ;    INT      10h
   339                                  ;    POP BX
   340                                  ;    POP AX
   341                                  
   342                                  Return:
   343 00000145 C3                          RET
   344                                  
   345                                  ;
   346                                  ; ReadSectorEx
   347                                  ;
   348                                  ; This uses the extended BIOS INT 13H to read a sector using an LBA.
   349                                  ;
   350                                  ; Input:
   351                                  ;   DX:AX - The sector to read in LBA.
   352                                  ;   BX - Buffer to store data
   353                                  ;
   354                                  ReadSectorEx:
   355 00000146 56                          PUSH     SI
   356 00000147 50                          PUSH     AX
   357 00000148 52                          PUSH     DX
   358                                  
   359 00000149 C606[8E01]10                MOV      BYTE [Packet], 10h
   360 0000014E C606[9001]01                MOV      BYTE [Packet + 2], 1
   361 00000153 891E[9201]                  MOV      WORD [Packet + 4], BX
   362                                  
   363 00000157 A3[9601]                    MOV      WORD [Packet + 8], AX
   364 0000015A 8916[9801]                  MOV      WORD [Packet + 10], DX
   365                                  
   366 0000015E BE[8E01]                    MOV      SI, Packet
   367 00000161 8A16[4A00]                  MOV      DL, [DriveId]
   368 00000165 B442                        MOV      AH, 42H
   369 00000167 CD13                        INT      13H
   370                                  
   371 00000169 5A                          POP      DX
   372 0000016A 58                          POP      AX
   373 0000016B 5E                          POP      SI
   374 0000016C C3                          RET
   375                                  
   376                                      ;
   377                                      ; Data area.
   378                                      ; Note that the padding is used to ensure that the signature (which the MBR looks for to know
   379                                      ; it has a valid boot sector) falls at the end of the 512 byte sector.
   380                                      ;
   381 0000016D 0D0A42616420434520-     ErrorMsg     DB  0DH, 0AH, 'Bad CE System Disk!', 0
   381 00000176 53797374656D204469-
   381 0000017F 736B2100           
   382 00000183 4E5745434C44522020-     ImageName    DB  'NWECLDR    '
   382 0000018C 2020               
   383 0000018E 10                      Packet       DB  10h ; Size of the Packet - 16
   384 0000018F 00                                   DB  00h ; Reserved - 0
   385 00000190 01                                   DB  01h ; Blocks to read - 1
   386 00000191 00                                   DB  00h ; Reserved - 0
   387 00000192 00                                   DB  00h ; 32-bit Address  = 0x500
   388 00000193 00                                   DB  00h
   389 00000194 00                                   DB  00h
   390 00000195 00                                   DB  00h
   391 00000196 00                                   DB  00h ; 64-bit Sector = 4190=0x105e
   392 00000197 00                                   DB  00h
   393 00000198 00                                   DB  00h
   394 00000199 00                                   DB  00h
   395 0000019A 00                                   DB  00h
   396 0000019B 00                                   DB  00h
   397 0000019C 00                                   DB  00h
   398 0000019D 00                                   DB  00h
   399                                  
   400 0000019E 00<rept>                times 510 - ($ - $$) db 0 ; padding
   401 000001FE 55AA                    DB 0x55, 0xAA             ; Signature 
